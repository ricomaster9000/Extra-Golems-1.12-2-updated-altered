buildscript {
  repositories {
    maven { url = 'https://maven.minecraftforge.net/' }
    mavenCentral()
  }
  dependencies {
    classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
  }
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = '1.0'
group = 'com.golems' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'ExtraGolems'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

def mod_file = getModFile()
def short_version = getVersion('VERSION', mod_file)
version = mc_version + '-' + short_version
def display_version = short_version

if (System.getenv().BUILD_NUMBER) {
  version += '.' + System.getenv().BUILD_NUMBER
  display_version += '.' + System.getenv().BUILD_NUMBER
}

sourceCompatibility = targetCompatibility = '1.8'

minecraft {
  version = "1.12.2-14.23.5.2847"
  mappings = "snapshot_20171003"
}

repositories {
  maven { url = 'https://maven.minecraftforge.net/' }
  maven { url = 'https://cursemaven.com' }
  mavenCentral()
}

dependencies {

  // Use runtimeOnly for runtime dependencies like JEI
  runtimeOnly "curse.maven:jei-238222:5101347"

  // Use implementation for compile-time and runtime dependencies from CurseMaven
  implementation "curse.maven:the-one-probe-245211:2667280"
  implementation("curse.maven:hwyla-253449:2568751") {
    exclude group: 'mezz.jei'
  }
}

String getModFile() {
  String path = ''
  FileTree tree = fileTree(dir: 'src/main/java')
  tree.include '**/*.java'
  tree.visit { element ->
    if (element.file.isFile()) {
      element.file.eachLine { String s ->
        s = s.trim()
        if (s.startsWith('@Mod(')) {
          path = "src/main/java/$element.relativePath"
        }
      }
    }
  }
  return path
}

String getVersion(String type, String mod_file) {
  String major = '0'
  String revision = '0'
  String patch = '0'
  File file = file(mod_file)
  def prefix = ~/^(?:public|protected|private) static final String $type = ".*$/
  file.eachLine { String s ->
    s = s.trim()
    if (s ==~ prefix || prefix.matcher(s).matches()) {
      String[] bits = s.split("=")
      String interesting = bits[1].trim()
      interesting = interesting.substring(1, interesting.length() - 2)
      String[] pts = interesting.trim().split("\\.")

      major = pts[0] ?: '0'
      revision = pts[1] ?: '0'
      patch = pts[2] ?: '0'
    }
  }
  return "$major.$revision.$patch"
}

jar.finalizedBy('reobfJar')

publishing {
  publications {
    mavenJava(MavenPublication) {
      artifact jar
    }
  }
  repositories {
    maven {
      url "file:///${project.projectDir}/mcmodsrepo"
    }
  }
}
